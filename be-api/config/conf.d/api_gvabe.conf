# HTTP API endpoints must be configured at "api.http.endpoints"
api {
  http {
    # API HTTP endpoints
    endpoints {
      # format: {url={http-method=handler-name}}
      "/info" {
        get = "info"
      }
      "/api/login" {
        post = "login"
      }
      "/api/verifyLoginToken" {
        post = "verifyLoginToken"
      }
      "/api/systemInfo" {
        get = "systemInfo"
      }

      "/api/myapps" {
        get = "myAppList"
        post = "registerApp"
      }
      "/api/myapp/:id" {
        get = "getMyApp"
        put = "updateMyApp"
        delete = "deleteMyApp"
      }
      "/api/app/:id" {
        get = "getApp"
      }
    }
  }
}

gvabe {
  ## Initializing data
  init {
    ## user id of the system "exter" app's owner
    # override this setting with env INIT_SYSTEM_OWNER_ID
    system_app_owner_id = ${?INIT_SYSTEM_OWNER_ID}
  }

  ## Key configurations
  keys {
    ## path to RSA private key (PEM format)
    # override this setting with env RSA_PRIVKEY_FILE
    rsa_privkey_file = "./config/keys/exter_priv.pem"
    rsa_privkey_file = ${?RSA_PRIVKEY_FILE}

    ## pass phrase for RSA private key
    rsa_privkey_passphrase = "exters3cr3t"
    # override this setting with env RSA_PRIVKEY_PASSPHRASE
    rsa_privkey_passphrase = ${?RSA_PRIVKEY_PASSPHRASE}
  }

  ## enabled login channels, comma separated
  # (supported channels: facebook, github, gooogle, linkedin)
  # override this setting with env LOGIN_CHANNELS
  login_channels = "facebook,github,google,linkedin"
  login_channels = ${?LOGIN_CHANNELS}

  ## Exter home url, used as "redirect_uri" for OAuth2
  # available since v0.3.0
  # override this setting with env EXTER_HOME_URL
  exter_home_url = ${?EXTER_HOME_URL}

  channels {
    google {
      ## Google API's ProjectID and Client Secret info
      # either provide full content of client secret file in JSON format (download from https://console.developers.google.com/apis/credentials?project=<project-id>)
      # or provide values for project_id, client_id, client_secret and app_domains

      # override this setting with env GOOGLE_API_PROJECT_ID
      project_id = ${?GOOGLE_API_PROJECT_ID}
      # override these settings with env GOOGLE_API_CLIENT_ID and GOOGLE_API_CLIENT_SECRET
      client_id = ${?GOOGLE_API_CLIENT_ID}
      client_secret = ${?GOOGLE_API_CLIENT_SECRET}
      # override this setting with env GOOGLE_API_APP_DOMAINS
      # deprecated since v0.3.0, replaced by "gvabe.exter_home_url"
      app_domains = ${?GOOGLE_API_APP_DOMAINS}

      # override this setting with env GOOGLE_API_CLIENT_SECRET_JSON
      client_secret_json = ${?GOOGLE_API_CLIENT_SECRET_JSON}
    }
    github {
      ## Github's ClientID & Client Secret info
      # override these settings with env GITHUB_OAUTHAPP_CLIENT_ID and GITHUB_OAUTHAPP_CLIENT_SECRET
      client_id = ${?GITHUB_OAUTHAPP_CLIENT_ID}
      client_secret = ${?GITHUB_OAUTHAPP_CLIENT_SECRET}
    }
    facebook {
      ## Facebook's App ID & App Secret info
      # override these settings with env FACEBOOK_APP_ID and FACEBOOK_APP_SECRET
      app_id = ${?FACEBOOK_APP_ID}
      app_secret = ${?FACEBOOK_APP_SECRET}
    }
    linkedin {
      ## LinkedIn's ClientID & Client Secret info
      # override these settings with env LINKEDIN_CLIENT_ID and LINKEDIN_CLIENT_SECRET
      client_id = ${?LINKEDIN_CLIENT_ID}
      client_secret = ${?LINKEDIN_CLIENT_SECRET}

      # LinkedIn does not support redirect_uri with dynamic parts. Hence we need to configure a static redirect_uri.
      # override this setting with env LINKEDIN_REDIRECT_URI
      redirect_uri = ${?LINKEDIN_REDIRECT_URI}
    }
  }

  db {
    # Support db types: sqlite, pgsql, dynamodb, mongodb
    # override this setting with env DB_TYPE
    type = "sqlite"
    type = ${?DB_TYPE}

    ## SQLite (used for non-production only!)
    # directory: directory to store SQLite data
    # dbname: SQLite database name
    sqlite {
      directory = "./data/sqlite"
      dbname = "gvabe"
    }

    ## PostgreSQL
    pgsql {
      # override this setting with env DB_PGSQL_URL
      #url = "postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=exter"
      url = ${?DB_PGSQL_URL}
    }

    ## AWS DynamoDB
    # region: AWS region
    # database credentials are obtained from env.AWS_ACCESS_KEY_ID and env.AWS_SECRET_ACCESS_KEY
    # DynamoDB endpoint can be overriden via env.DB_DYNAMODB_ENDPOINT (useful for testing against local DynamoDB instance)
    dynamodb {
      # override this setting with env DB_DYNAMODB_REGION
      #region = "ap-southeast-1"
      region = ${?DB_DYNAMODB_REGION}

      # override this setting with env DB_DYNAMODB_ENDPOINT
      endpoint = ${?DB_DYNAMODB_ENDPOINT}

      # If true, use only one DynamoDB table to store all types of BO.
      # override this setting with env DB_DYNAMODB_MULTITENANT
      multitenant = true
      multitenant = ${?DB_DYNAMODB_MULTITENANT}
    }

    ## MongoDB
    mongodb {
      # override these settings with env DB_MONGODB_DB and DB_MONGODB_URL
      #db = "test"
      #url = "mongodb://root:test@localhost:27017/admin?replicaSet=replicaset&w=majority&retryWrites=true"
      db = ${?DB_MONGODB_DB}
      url = ${?DB_MONGODB_URL}
    }
  }
}

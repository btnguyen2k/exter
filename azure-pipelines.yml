# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.13' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- task: GoTool@0
  inputs:
    version: '1.13'
- task: NodeTool@0 
  inputs:
    versionSpec: '12.x'

- script: |
    npm install
    npm run build
  workingDirectory: $(system.defaultWorkingDirectory)/fe-gui
  displayName: 'Exter-FE: install dependencies and build'

- task: Go@0
  inputs:
    command: 'build'
    arguments: '-o main'
    workingDirectory: '$(System.DefaultWorkingDirectory)/be-api'
  displayName: 'Exter-BE: build'

- task: Go@0
  inputs:
    command: 'test'
    arguments: '-v -cover'
    workingDirectory: '$(System.DefaultWorkingDirectory)/be-api'
  displayName: 'Exter-BE: test'

# - script: |
#     mkdir -p '$(GOBIN)'
#     mkdir -p '$(GOPATH)/pkg'
#     mkdir -p '$(modulePath)'
#     shopt -s extglob
#     shopt -s dotglob
#     mv !(gopath) '$(modulePath)'
#     echo '##vso[task.prependpath]$(GOBIN)'
#     echo '##vso[task.prependpath]$(GOROOT)/bin'
#   displayName: 'Set up the Go workspace'

# - script: |
#     go version
#     go get -v -t -d ./...
#     if [ -f Gopkg.toml ]; then
#         curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#         dep ensure
#     fi
#     go build -v .
#   workingDirectory: '$(modulePath)'
#   displayName: 'Get dependencies, then build'

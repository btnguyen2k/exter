# Azure pipeline to build & deploy Exter

trigger:
  batch: true
  branches:
    include:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  goVersion: '1.13'
  goBuiltAppName: 'main'
  nodejsVersion: '13.x'
  dockerVersion: '19.03.9'
  herokuRegistry: 'registry.heroku.com'
  herokuApp: 'exteross'
  branchMasterChanged: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}
  branchHerokuChanged: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/heroku-build') }}

stages:
  - stage: build
    displayName: Build project
    jobs:
      - job: build
        displayName: Build project
        steps:
        - task: GoTool@0
          displayName: Prepare Go env
          inputs:
            version: '$(goVersion)'
        - task: NodeTool@0
          displayName: Prepare NodeJs env
          inputs:
            versionSpec: '$(nodejsVersion)'
        - task: Npm@1
          displayName: 'FE: npm install'
          inputs:
            command: install
            workingDir: '$(System.DefaultWorkingDirectory)/fe-gui'
        - task: Npm@1
          displayName: 'FE: npm run build'
          inputs:
            command: custom
            customCommand: 'run build'
            workingDir: '$(System.DefaultWorkingDirectory)/fe-gui'
        - script: cd $(System.DefaultWorkingDirectory)/be-api && go build -o $(goBuiltAppName) -tags netgo -a
          displayName: 'BE: go build'

  - stage: test
    displayName: Run tests
    dependsOn: build
    jobs:
      - job: test_aws_dynamodb
        displayName: Run tests against AWS DynamoDB
        steps:
        - task: GoTool@0
          displayName: Prepare Go env
          inputs:
            version: '$(goVersion)'
        - task: DockerInstaller@0
          displayName: Prepare Docker CLI
          inputs:
            dockerVersion: '$(dockerVersion)'
            releaseType: 'stable'
        - script: |
            docker run -d --rm --name dynamodb -p 8000:8000 amazon/dynamodb-local -jar DynamoDBLocal.jar -inMemory -sharedDb
            export AWS_REGION="us-west-2"
            export AWS_ACCESS_KEY_ID="DUMMYIDEXAMPLE"
            export AWS_SECRET_ACCESS_KEY="DUMMYEXAMPLEKEY"
            export AWS_DYNAMODB_ENDPOINT="http://localhost:8000"
            cd $(System.DefaultWorkingDirectory)/be-api && go test -cover -v -count 1 ./src/gvabe/bo/app
            cd $(System.DefaultWorkingDirectory)/be-api && go test -cover -v -count 1 ./src/gvabe/bo/session
            cd $(System.DefaultWorkingDirectory)/be-api && go test -cover -v -count 1 ./src/gvabe/bo/user
            docker stop dynamodb
          displayName: 'BE: Run tests against AWS DynamoDB'

  - stage: deploy_heroku
    displayName: Build image and deploy to Heroku
    dependsOn: test
    # condition: eq(variables['branchMasterChanged'], false)
    condition: eq(variables['branchHerokuChanged'], true)
    variables:
      - group: Release
    jobs:
      - job: build
        displayName: Build image
        steps:
        - task: DockerInstaller@0
          displayName: Prepare Docker CLI
          inputs:
            dockerVersion: '$(dockerVersion)'
            releaseType: 'stable'
        - script: |
            #APP_NAME=`jq -r '.name' $(System.DefaultWorkingDirectory)/appinfo.json`
            #echo '##vso[task.setvariable variable=APP_NAME]'$APP_NAME
            #
            APP_SHORTNAME=`jq -r '.shortname' $(System.DefaultWorkingDirectory)/appinfo.json`
            echo '##vso[task.setvariable variable=APP_SHORTNAME]'$APP_SHORTNAME
            #
            #APP_INITIAL=`jq -r '.initial' $(System.DefaultWorkingDirectory)/appinfo.json`
            #echo '##vso[task.setvariable variable=APP_INITIAL]'$APP_INITIAL
            #
            APP_VERSION=`jq -r '.version' $(System.DefaultWorkingDirectory)/appinfo.json`
            BUILD_DATE=`date '+%Y%m%d'`
            APP_VERSION=${APP_VERSION}-b${BUILD_DATE}.$(Build.BuildId)
            echo '##vso[task.setvariable variable=APP_VERSION]'$APP_VERSION
            appInfo=`jq ".version=\"$APP_VERSION\"" $(System.DefaultWorkingDirectory)/appinfo.json`
            echo $appInfo > $(System.DefaultWorkingDirectory)/appinfo.json
            #
            #APP_DESC=`jq -r '.description' $(System.DefaultWorkingDirectory)/appinfo.json`
            #echo '##vso[task.setvariable variable=APP_DESC]'$APP_DESC
            #
            sed -i 's/{?HTTP_LISTEN_PORT}/{?PORT}/g' $(System.DefaultWorkingDirectory)/be-api/config/api.conf
            sed -i 's/{?DB_PGSQL_URL}/{?DATABASE_URL}/g' $(System.DefaultWorkingDirectory)/be-api/config/conf.d/api_gvabe.conf
            rm -f $(System.DefaultWorkingDirectory)/fe-gui/.env
          displayName: Init application info
        - task: Docker@2
          displayName: Build Docker image
          inputs:
            command: build
            buildContext: '$(System.DefaultWorkingDirectory)'
            repository: '$(APP_SHORTNAME)'
            tags: latest
        - script: |
            echo Logging in to $(herokuRegistry)...
            export HEROKU_API_KEY=$(HerokuToken)
            echo $(HerokuToken) | docker login -u _ --password-stdin $(herokuRegistry)
            docker tag $(APP_SHORTNAME) $(herokuRegistry)/$(herokuApp)/web
            docker images
            echo Pushing image...
            docker push $(herokuRegistry)/$(herokuApp)/web
            echo Releasing image...
            heroku container:release web -a $(herokuApp)
            echo Logging out...
            docker logout $(herokuRegistry)
            unset HEROKU_API_KEY
          displayName: Push and Deploy to Heroku

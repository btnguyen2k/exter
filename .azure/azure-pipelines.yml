# Azure pipeline to build & deploy Exter

trigger:
  batch: true
  branches:
    include:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  appName: exter
  appVersion: '0.1.0'
  goVersion: '1.13'
  goBuiltAppName: 'main'
  nodejsVersion: '12.x'
  dockerVersion: '19.03.9'
  branchMasterChanged: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}

stages:
  - stage: build
    displayName: Build project
    jobs:
      - job: build
        displayName: Build project
        steps:
        - task: GoTool@0
          displayName: Prepare Go env
          inputs:
            version: '$(goVersion)'
        - task: NodeTool@0
          displayName: Prepare NodeJs env
          inputs:
            versionSpec: '$(nodejsVersion)'
        - task: DockerInstaller@0
          displayName: Prepare Docker CLI
          inputs:
            dockerVersion: '$(dockerVersion)'
            releaseType: 'stable'
        - task: Npm@1
          displayName: 'FE: npm install'
          inputs:
            command: install
            workingDir: '$(System.DefaultWorkingDirectory)/fe-gui'
        - task: Npm@1
          displayName: 'FE: npm run build'
          inputs:
            command: custom
            customCommand: 'run build'
            workingDir: '$(System.DefaultWorkingDirectory)/fe-gui'
        - script: cd $(System.DefaultWorkingDirectory)/be-api && go build -o $(goBuiltAppName) -tags netgo -a
          displayName: 'BE: go build'
        - script: cd $(System.DefaultWorkingDirectory)/be-api && go test -v --cover
          displayName: 'BE: go test'

  - stage: deploy_heroku
    displayName: Build image and deploy to Heroku
    dependsOn: build
    condition: eq(variables['branchMasterChanged'], false)
    jobs:
      - job: build
        displayName: Build image
        steps:
        - task: DockerInstaller@0
          displayName: Prepare Docker CLI
          inputs:
            dockerVersion: '$(dockerVersion)'
            releaseType: 'stable'
        - task: Docker@2
          displayName: Build Docker image
          inputs:
            command: build
            buildContext: '$(System.DefaultWorkingDirectory)'
            Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile.local'
            repository: '$(appName)'
            tags: latest
        - script: docker images

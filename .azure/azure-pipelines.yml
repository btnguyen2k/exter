# Azure pipeline to build & deploy Exter

trigger:
  batch: true
  branches:
    include:
      - '*'
  paths:
    exclude:
      - 'docs/*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: goVersion
    value: '1.13'
  - name: goBuiltAppName
    value: 'main'
  - name: nodejsVersion
    value: '13.x'
  - name: dockerVersion
    value: '19.03.9'
  - name: herokuRegistry
    value: 'registry.heroku.com'
  - name: herokuApp
    value: 'exteross'
  # - name: branchMasterChanged
  #   value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}
  - name: branchHerokuChanged
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/heroku-build') }}
  - name: branchDockerHubChanged
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/dockerhub-build') }}
  - name: branchIdBtnguyen2kChanged
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/id.btnguyen2k-build') }}
  - group: Release

stages:
  # - stage: build
  #   displayName: Build project
  #   jobs:
  #     - job: build
  #       displayName: Build project
  #       steps:
  #       - task: GoTool@0
  #         displayName: Prepare Go env
  #         inputs:
  #           version: '$(goVersion)'
  #       - task: NodeTool@0
  #         displayName: Prepare NodeJs env
  #         inputs:
  #           versionSpec: '$(nodejsVersion)'
  #       - task: Npm@1
  #         displayName: 'FE: npm install'
  #         inputs:
  #           command: install
  #           workingDir: '$(System.DefaultWorkingDirectory)/fe-gui'
  #       - task: Npm@1
  #         displayName: 'FE: npm run build'
  #         inputs:
  #           command: custom
  #           customCommand: 'run build'
  #           workingDir: '$(System.DefaultWorkingDirectory)/fe-gui'
  #       - script: cd $(System.DefaultWorkingDirectory)/be-api && go build -o $(goBuiltAppName) -tags netgo -a
  #         displayName: 'BE: go build'

  # - stage: test
  #   displayName: Run tests
  #   dependsOn: build
  #   jobs:
  #     - job: test_aws_dynamodb
  #       displayName: Run tests against AWS DynamoDB
  #       steps:
  #       - task: GoTool@0
  #         displayName: Prepare Go env
  #         inputs:
  #           version: '$(goVersion)'
  #       - task: DockerInstaller@0
  #         displayName: Prepare Docker CLI
  #         inputs:
  #           dockerVersion: '$(dockerVersion)'
  #           releaseType: 'stable'
  #       - script: |
  #           docker run -d --rm --name dynamodb -p 8000:8000 amazon/dynamodb-local -jar DynamoDBLocal.jar -inMemory -sharedDb
  #           export AWS_REGION="us-west-2"
  #           export AWS_ACCESS_KEY_ID="DUMMYIDEXAMPLE"
  #           export AWS_SECRET_ACCESS_KEY="DUMMYEXAMPLEKEY"
  #           export AWS_DYNAMODB_ENDPOINT="http://localhost:8000"
  #           cd $(System.DefaultWorkingDirectory)/be-api \
  #             && go test -cover -coverprofile=coverage_dynamodb.txt -v -count 1 ./src/gvabe/bo/app ./src/gvabe/bo/session ./src/gvabe/bo/user \
  #             && bash <(curl -s https://codecov.io/bash) -cF dynamodb
  #         displayName: 'BE: Run tests against AWS DynamoDB'

  #     - job: test_pgsql
  #       displayName: Run tests against PostgreSQL
  #       steps:
  #       - task: GoTool@0
  #         displayName: Prepare Go env
  #         inputs:
  #           version: '$(goVersion)'
  #       - task: DockerInstaller@0
  #         displayName: Prepare Docker CLI
  #         inputs:
  #           dockerVersion: '$(dockerVersion)'
  #           releaseType: 'stable'
  #       - script: |
  #           docker run -d --name postgres -e POSTGRES_DB=test -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -p 5432:5432 postgres:11
  #           export PGSQL_DRIVER="pgx"
  #           export PGSQL_URL="postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=prom"
  #           cd $(System.DefaultWorkingDirectory)/be-api \
  #             && go test -cover -coverprofile=coverage_pgsql.txt -v -count 1 ./src/gvabe/bo/app ./src/gvabe/bo/session ./src/gvabe/bo/user \
  #             && bash <(curl -s https://codecov.io/bash) -cF pgsql
  #         displayName: 'BE: Run tests against PostgreSQL'

  #     - job: test_mysql
  #       displayName: Run tests against MySQL
  #       steps:
  #       - task: GoTool@0
  #         displayName: Prepare Go env
  #         inputs:
  #           version: '$(goVersion)'
  #       - task: DockerInstaller@0
  #         displayName: Prepare Docker CLI
  #         inputs:
  #           dockerVersion: '$(dockerVersion)'
  #           releaseType: 'stable'
  #       - script: |
  #           docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=test -e MYSQL_DATABASE=test -e MYSQL_USER=test -e MYSQL_PASSWORD=test -p 3306:3306 mysql:8
  #           export MYSQL_DRIVER="mysql"
  #           export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=false&loc=\${loc}"
  #           cd $(System.DefaultWorkingDirectory)/be-api \
  #             && go test -cover -coverprofile=coverage_mysql.txt -v -count 1 ./src/gvabe/bo/app ./src/gvabe/bo/session ./src/gvabe/bo/user \
  #             && bash <(curl -s https://codecov.io/bash) -cF mysql
  #         displayName: 'BE: Run tests against MySQL'

  #     - job: test_mssql
  #       displayName: Run tests against MSSQL
  #       steps:
  #       - task: GoTool@0
  #         displayName: Prepare Go env
  #         inputs:
  #           version: '$(goVersion)'
  #       - task: DockerInstaller@0
  #         displayName: Prepare Docker CLI
  #         inputs:
  #           dockerVersion: '$(dockerVersion)'
  #           releaseType: 'stable'
  #       - script: |
  #           docker run -d --name mssql-express -e ACCEPT_EULA=Y -e SA_PASSWORD=SecretPassword1 -e MSSQL_PID=Express -p 1433:1433 mcr.microsoft.com/mssql/server:2019-latest
  #           export MSSQL_DRIVER="sqlserver"
  #           export MSSQL_URL="sqlserver://sa:SecretPassword1@localhost:1433?database=tempdb"
  #           cd $(System.DefaultWorkingDirectory)/be-api \
  #             && go test -cover -coverprofile=coverage_mssql.txt -v -count 1 ./src/gvabe/bo/app ./src/gvabe/bo/session ./src/gvabe/bo/user \
  #             && bash <(curl -s https://codecov.io/bash) -cF mssql
  #         displayName: 'BE: Run tests against MSSQL'

  #     - job: test_sqlite
  #       displayName: Run tests against SQLite
  #       steps:
  #       - task: GoTool@0
  #         displayName: Prepare Go env
  #         inputs:
  #           version: '$(goVersion)'
  #       - script: |
  #           export PWD=$(pwd)
  #           mkdir $PWD/temp
  #           export SQLITE_DRIVER="sqlite3"
  #           export SQLITE_URL="$PWD/temp/temp.db"
  #           cd $(System.DefaultWorkingDirectory)/be-api \
  #             && go test -cover -coverprofile=coverage_sqlite.txt -v -count 1 ./src/gvabe/bo/app ./src/gvabe/bo/session ./src/gvabe/bo/user \
  #             && bash <(curl -s https://codecov.io/bash) -cF sqlite
  #         displayName: 'BE: Run tests against SQLite'

  # - stage: build_dockerhub
  #   displayName: Build image and public to Docker Hub
  #   # dependsOn: test
  #   condition: or(eq(variables['branchDockerHubChanged'], true), eq(variables['branchIdBtnguyen2kChanged'], true))
  #   jobs:
  #     - job: build_and_publish
  #       displayName: Build and Publish Docker image
  #       steps:
  #       - task: DockerInstaller@0
  #         displayName: Prepare Docker CLI
  #         inputs:
  #           dockerVersion: '$(dockerVersion)'
  #           releaseType: 'stable'
  #       - script: |
  #           APP_SHORTNAME=`jq -r '.shortname' $(System.DefaultWorkingDirectory)/appinfo.json`
  #           echo '##vso[task.setvariable variable=APP_SHORTNAME]'$APP_SHORTNAME

  #           APP_VERSION=`jq -r '.version' $(System.DefaultWorkingDirectory)/appinfo.json`
  #           echo '##vso[task.setvariable variable=APP_VERSION]'$APP_VERSION
  #           APP_VERSION_ARR=($(echo $APP_VERSION | tr "." "\n"))
  #           echo '##vso[task.setvariable variable=APP_VERSION_ARR_0]'${APP_VERSION_ARR[0]}
  #           echo '##vso[task.setvariable variable=APP_VERSION_ARR_1]'${APP_VERSION_ARR[0]}.${APP_VERSION_ARR[1]}
  #           APP_VERSION=${APP_VERSION}-b$(Build.BuildId)
  #           echo '##vso[task.setvariable variable=APP_VERSION_BUILD]'$APP_VERSION

  #           appInfo=`jq ".version=\"$APP_VERSION\"" $(System.DefaultWorkingDirectory)/appinfo.json`
  #           echo $appInfo > $(System.DefaultWorkingDirectory)/appinfo.json

  #           rm -f $(System.DefaultWorkingDirectory)/fe-gui/.env
  #         displayName: Init application info
  #       - task: Docker@2
  #         displayName: Build and Publish Docker image
  #         inputs:
  #           command: buildAndPush
  #           buildContext: '$(System.DefaultWorkingDirectory)'
  #           containerRegistry: '$(DockerRegistry)'
  #           repository: '$(DockerRegistryAccount)$(APP_SHORTNAME)'
  #           tags: |
  #             $(APP_VERSION_BUILD)
  #             $(APP_VERSION_ARR_0)
  #             $(APP_VERSION_ARR_1)
  #             latest

  - stage: build_id_btnguyen2k
    displayName: Deploy id.btnguyen2k
    # dependsOn: build_dockerhub
    condition: eq(variables['branchIdBtnguyen2kChanged'], true)
    jobs:
      - deployment: deploy
        displayName: Deploy id.btnguyen2k
        environment: id_btnguyen2k
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: KubectlInstaller@0
                  displayName: Prepare Kubectl CLI
                  inputs: 
                    kubectlVersion: latest
                - script: |
                    APP_SHORTNAME=`jq -r '.shortname' $(System.DefaultWorkingDirectory)/appinfo.json`
                    echo '##vso[task.setvariable variable=APP_SHORTNAME]'$APP_SHORTNAME
                  displayName: Init application info
                - task: KubernetesManifest@0
                  displayName: Bake K8s manifests from Helm chart
                  name: bake
                  inputs:
                    action: bake
                    renderType: helm2
                    helmChart: charts/exter
                    overrides: |
                      image.repository:$(DockerRegistryAccount)$(APP_SHORTNAME)
                - task: KubernetesManifest@0
                  displayName: Deploy K8s manifests
                  inputs:
                    kubernetesServiceConnection: '$(K8sCluster)'
                    namespace: $(APP_SHORTNAME)
                    manifests: $(bake.manifestsBundle)
                    timeoutForRolloutStatus: 60

  # - stage: deploy_heroku
  #   displayName: Build and deploy to Heroku
  #   dependsOn: test
  #   condition: eq(variables['branchHerokuChanged'], true)
  #   jobs:
  #     - job: build_deploy
  #       displayName: Build and deploy to Heroku
  #       steps:
  #       - task: DockerInstaller@0
  #         displayName: Prepare Docker CLI
  #         inputs:
  #           dockerVersion: '$(dockerVersion)'
  #           releaseType: 'stable'
  #       - script: |
  #           APP_SHORTNAME=`jq -r '.shortname' $(System.DefaultWorkingDirectory)/appinfo.json`
  #           echo '##vso[task.setvariable variable=APP_SHORTNAME]'$APP_SHORTNAME
  #           APP_VERSION=`jq -r '.version' $(System.DefaultWorkingDirectory)/appinfo.json`
  #           BUILD_DATE=`date '+%Y%m%d'`
  #           APP_VERSION=${APP_VERSION}-b${BUILD_DATE}.$(Build.BuildId)
  #           echo '##vso[task.setvariable variable=APP_VERSION]'$APP_VERSION
  #           appInfo=`jq ".version=\"$APP_VERSION\"" $(System.DefaultWorkingDirectory)/appinfo.json`
  #           echo $appInfo > $(System.DefaultWorkingDirectory)/appinfo.json
  #           sed -i 's/{?HTTP_LISTEN_PORT}/{?PORT}/g' $(System.DefaultWorkingDirectory)/be-api/config/api.conf
  #           sed -i 's/{?DB_PGSQL_URL}/{?DATABASE_URL}/g' $(System.DefaultWorkingDirectory)/be-api/config/conf.d/api_gvabe.conf
  #           rm -f $(System.DefaultWorkingDirectory)/fe-gui/.env
  #         displayName: Init application info
  #       - task: Docker@2
  #         displayName: Build Docker image
  #         inputs:
  #           command: build
  #           buildContext: '$(System.DefaultWorkingDirectory)'
  #           repository: '$(APP_SHORTNAME)'
  #           tags: latest
  #       - script: |
  #           echo Logging in to $(herokuRegistry)...
  #           export HEROKU_API_KEY=$(HerokuToken)
  #           echo $(HerokuToken) | docker login -u _ --password-stdin $(herokuRegistry)
  #           docker tag $(APP_SHORTNAME) $(herokuRegistry)/$(herokuApp)/web
  #           docker images
  #           echo Pushing image...
  #           docker push $(herokuRegistry)/$(herokuApp)/web
  #           echo Releasing image...
  #           heroku container:release web -a $(herokuApp)
  #           echo Logging out...
  #           docker logout $(herokuRegistry)
  #           unset HEROKU_API_KEY
  #         displayName: Push and Deploy to Heroku
